/*
 * APIFiddle Sample Definition
 * Example workspace
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateFish400Response;
import org.openapitools.client.model.DeleteFishBadRequest;
import org.openapitools.client.model.DeleteFishConflict;
import org.openapitools.client.model.DeleteFishInternalServerError;
import org.openapitools.client.model.DeleteFishNotFound;
import org.openapitools.client.model.Fish;
import org.openapitools.client.model.FishSummary;
import org.openapitools.client.model.GetFishListBadRequest;
import org.openapitools.client.model.GetFishListInternalServerError;
import org.openapitools.client.model.GetFishListNotFound;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FishApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FishApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FishApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFish
     * @param fish  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful, and a new resource was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFishCall(@javax.annotation.Nonnull Fish fish, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fish;

        // create path and map variables
        String localVarPath = "/fishes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFishValidateBeforeCall(@javax.annotation.Nonnull Fish fish, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fish' is set
        if (fish == null) {
            throw new ApiException("Missing the required parameter 'fish' when calling createFish(Async)");
        }

        return createFishCall(fish, _callback);

    }

    /**
     * Create fish
     * Create a fish
     * @param fish  (required)
     * @return Fish
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful, and a new resource was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
     </table>
     */
    public Fish createFish(@javax.annotation.Nonnull Fish fish) throws ApiException {
        ApiResponse<Fish> localVarResp = createFishWithHttpInfo(fish);
        return localVarResp.getData();
    }

    /**
     * Create fish
     * Create a fish
     * @param fish  (required)
     * @return ApiResponse&lt;Fish&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful, and a new resource was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Fish> createFishWithHttpInfo(@javax.annotation.Nonnull Fish fish) throws ApiException {
        okhttp3.Call localVarCall = createFishValidateBeforeCall(fish, null);
        Type localVarReturnType = new TypeToken<Fish>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create fish (asynchronously)
     * Create a fish
     * @param fish  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The request was successful, and a new resource was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFishAsync(@javax.annotation.Nonnull Fish fish, final ApiCallback<Fish> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFishValidateBeforeCall(fish, _callback);
        Type localVarReturnType = new TypeToken<Fish>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFish
     * @param fishId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful, but there is no content to return in the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be completed due to a conflict with the current state of the resource. Resolve the conflict and try again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFishCall(@javax.annotation.Nonnull Integer fishId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fish/{fish_id}"
            .replace("{" + "fish_id" + "}", localVarApiClient.escapeString(fishId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFishValidateBeforeCall(@javax.annotation.Nonnull Integer fishId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fishId' is set
        if (fishId == null) {
            throw new ApiException("Missing the required parameter 'fishId' when calling deleteFish(Async)");
        }

        return deleteFishCall(fishId, _callback);

    }

    /**
     * delete fish
     * 
     * @param fishId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful, but there is no content to return in the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be completed due to a conflict with the current state of the resource. Resolve the conflict and try again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteFish(@javax.annotation.Nonnull Integer fishId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFishWithHttpInfo(fishId);
        return localVarResp.getData();
    }

    /**
     * delete fish
     * 
     * @param fishId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful, but there is no content to return in the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be completed due to a conflict with the current state of the resource. Resolve the conflict and try again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteFishWithHttpInfo(@javax.annotation.Nonnull Integer fishId) throws ApiException {
        okhttp3.Call localVarCall = deleteFishValidateBeforeCall(fishId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * delete fish (asynchronously)
     * 
     * @param fishId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful, but there is no content to return in the response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The request could not be completed due to a conflict with the current state of the resource. Resolve the conflict and try again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFishAsync(@javax.annotation.Nonnull Integer fishId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFishValidateBeforeCall(fishId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFish
     * @param fishId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFishCall(@javax.annotation.Nonnull Integer fishId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fishes/{fish_id}"
            .replace("{" + "fish_id" + "}", localVarApiClient.escapeString(fishId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFishValidateBeforeCall(@javax.annotation.Nonnull Integer fishId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fishId' is set
        if (fishId == null) {
            throw new ApiException("Missing the required parameter 'fishId' when calling getFish(Async)");
        }

        return getFishCall(fishId, _callback);

    }

    /**
     * Get Fish
     * Get fish based on id
     * @param fishId  (required)
     * @return Fish
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public Fish getFish(@javax.annotation.Nonnull Integer fishId) throws ApiException {
        ApiResponse<Fish> localVarResp = getFishWithHttpInfo(fishId);
        return localVarResp.getData();
    }

    /**
     * Get Fish
     * Get fish based on id
     * @param fishId  (required)
     * @return ApiResponse&lt;Fish&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Fish> getFishWithHttpInfo(@javax.annotation.Nonnull Integer fishId) throws ApiException {
        okhttp3.Call localVarCall = getFishValidateBeforeCall(fishId, null);
        Type localVarReturnType = new TypeToken<Fish>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Fish (asynchronously)
     * Get fish based on id
     * @param fishId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFishAsync(@javax.annotation.Nonnull Integer fishId, final ApiCallback<Fish> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFishValidateBeforeCall(fishId, _callback);
        Type localVarReturnType = new TypeToken<Fish>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFishList
     * @param locationId Location identifier (optional)
     * @param fishName Name of fish type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFishListCall(@javax.annotation.Nullable String locationId, @javax.annotation.Nullable String fishName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (fishName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fish_name", fishName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFishListValidateBeforeCall(@javax.annotation.Nullable String locationId, @javax.annotation.Nullable String fishName, final ApiCallback _callback) throws ApiException {
        return getFishListCall(locationId, fishName, _callback);

    }

    /**
     * Get fish list
     * Fetches a comprehensive list of all fish. Each fish object includes details like fish name and location.  This endpoint is paginated using the &#39;page&#39; syntax.
     * @param locationId Location identifier (optional)
     * @param fishName Name of fish type (optional)
     * @return List&lt;FishSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public List<FishSummary> getFishList(@javax.annotation.Nullable String locationId, @javax.annotation.Nullable String fishName) throws ApiException {
        ApiResponse<List<FishSummary>> localVarResp = getFishListWithHttpInfo(locationId, fishName);
        return localVarResp.getData();
    }

    /**
     * Get fish list
     * Fetches a comprehensive list of all fish. Each fish object includes details like fish name and location.  This endpoint is paginated using the &#39;page&#39; syntax.
     * @param locationId Location identifier (optional)
     * @param fishName Name of fish type (optional)
     * @return ApiResponse&lt;List&lt;FishSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FishSummary>> getFishListWithHttpInfo(@javax.annotation.Nullable String locationId, @javax.annotation.Nullable String fishName) throws ApiException {
        okhttp3.Call localVarCall = getFishListValidateBeforeCall(locationId, fishName, null);
        Type localVarReturnType = new TypeToken<List<FishSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get fish list (asynchronously)
     * Fetches a comprehensive list of all fish. Each fish object includes details like fish name and location.  This endpoint is paginated using the &#39;page&#39; syntax.
     * @param locationId Location identifier (optional)
     * @param fishName Name of fish type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful, and the server has returned the requested resource in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could not understand the request due to invalid syntax. The client should modify the request and try again. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFishListAsync(@javax.annotation.Nullable String locationId, @javax.annotation.Nullable String fishName, final ApiCallback<List<FishSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFishListValidateBeforeCall(locationId, fishName, _callback);
        Type localVarReturnType = new TypeToken<List<FishSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
